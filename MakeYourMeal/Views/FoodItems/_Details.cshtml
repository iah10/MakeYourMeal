@using System.Configuration
@using System.Web.UI.WebControls
@using MakeYourMeal.Data.Models
@model MakeYourMeal.ViewModels.FoodItemAndIgredientsViewModel

@{
	ViewBag.Title = "Details";
	const string path = "/Images/";
}

<h2 class="floatL">
	@{
		var imagePath = path + Model.ImagePath;
		<img src="@imagePath" alt="@Model.Name" width="88" height="66" />
	}
</h2>

<div class="floatL dd-font">
	<dl class="dl-horizontal">

		<dt>
			@Html.DisplayNameFor(model => model.Name)
		</dt>

		<dd>
			@Html.DisplayFor(model => model.Name)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.CategoryName)
		</dt>

		<dd>
			@Html.DisplayFor(model => model.CategoryName)
		</dd>

		<dt>
			@Html.DisplayNameFor(model => model.Price)
		</dt>

		<dd>
			@Html.DisplayFor(model => model.Price) <text>L.P.</text>
		</dd>
		<dt> Add To Order</dt>
		<dd> <button type="button" class="btn btn-default addToOrder">Add To Order</button> </dd>

	</dl>
</div>

<hr class="clearB" />

<div id="droppable-6" class="ui-widget-header">
	@if (!(Model.CategoryName.Equals(Category.BEVERAGES) || Model.CategoryName.Equals(Category.DESSERTS) || Model.CategoryName.Equals(Category.SIDES)))
	{
		<img src="~/Images/Trash.png" class="img-responsive" />
	}
</div>
@* This is temporary for testing purposes *@
<div id="extra" class="MainMenu">
	@if (!(Model.CategoryName.Equals(Category.BEVERAGES) || Model.CategoryName.Equals(Category.DESSERTS) || Model.CategoryName.Equals(Category.SIDES)))
	{
		<div class="list-group panel ingredients-style">
			<a href="#extraIngredients" class="list-group-item list-group-item-success ingredient-list" data-toggle="collapse" style=" background-color: rgb(26, 26, 26); color : white ;">Add Ingredients</a>
			<ul id="extraIngredients" class="collapse">
				<li data-ing-name="Mayonnaise" class="media-object text-center draggable">
					<img src="/Images/Mayonnaise.png" class="img-responsive center-block" alt="Mayonnaise">
				</li>
				<li data-ing-name="Cheese" class="media-object text-center draggable">
					<img src="/Images/Cheese.png" class="img-responsive center-block" alt="Cheese">
				</li>
				<li data-ing-name="Onion" class="media-object text-center draggable">
					<img src="/Images/Onion.png" class="img-responsive center-block" alt="Onion">
				</li>
				<li data-ing-name="Tomato" class="media-object text-center draggable">
					<img src="/Images/Tomato.png" class="img-responsive center-block" alt="Tomato">
				</li>
				<li data-ing-name="Lettuce" class="media-object text-center draggable">
					<img src="/Images/Lettuce.png" class="img-responsive center-block" alt="Lettuce">
				</li>
				<li data-ing-name="Pickles" class="media-object text-center draggable">
					<img src="/Images/Pickles.png" class="img-responsive center-block" alt="Pickles">
				</li>
			</ul>
		</div>
	}
</div>


<div id="drag-container">
	<ul id="ingredients" class="media-list media-middle text-center">
		@foreach (var ing in Model.Ingredients)
		{
			var ingImgPath = path + ing.ImagePath;
			var nDrag = !ing.IsRemovable ? "static" : "";
			<li data-ing-name="@ing.Name" class="media-object text-center @nDrag">
				<img src="@ingImgPath" class="img-responsive center-block" alt="@ing.Name" />
			</li>
		}
	</ul>
</div>
<script>
	$(function () {
		$("#page-content-wrapper").removeClass("dark-background");
		$("#page-content-wrapper").addClass("light-background");
		//console.log(viewModel.numberOfNoti());
		//keeps track of the added/removed ingredients
		var orderItem = {
			extraIngredients: [],
			withoutIngredients: [],
			addIng: function (ingName) {
				var a = orderItem.withoutIngredients.indexOf(ingName);
				if (orderItem.extraIngredients.indexOf(ingName) < 3) {
					//if the item was already removed, adding it now will reset both the without and extra ingredient
					if (a >= 0) {
						orderItem.withoutIngredients.splice(a, 1);
					} else {
						orderItem.extraIngredients.push(ingName);
					}
				}
			},
			removeIng: function (ingName) {
				var a = orderItem.extraIngredients.indexOf(ingName);
				//if the item was already added, removing it now will reset both the without and extra ingredient
				if (a >= 0) {
					orderItem.extraIngredients.splice(a, 1);
				} else {
					orderItem.withoutIngredients.push(ingName);
				}
			}
		};

		$('.addToOrder').click(function () {
			var url = "/Order/AddOrderItem/@Uri.EscapeUriString(Model.Name)";
			$.post(url, { extras: orderItem.extraIngredients, without: orderItem.withoutIngredients }, function (data) {
				viewModel.numberOfNoti(viewModel.numberOfNoti() + 1);
			});
		});



		//get config data
		function config(fixed, items) {
			return {
				cancel: fixed,
				items: items,
				revert: true,
				scroll: false,
				containment: "document",
				opacity: 0.75,
				tolerance: "pointer",
				forcePlaceholderSize: true,
				start: function () {
					$(fixed, this).each(function () {
						var $this = $(this);
						$this.data('pos', $this.index());
					});
				},
				change: function () {
					var $sortable = $(this);
					var $statics = $(fixed, this).detach();
					var tagName = $statics.prop('tagName');
					var $helper = $('<' + tagName + '/>').prependTo(this);
					$statics.each(function () {
						var $this = $(this);
						var target = $this.data('pos');
						$this.insertAfter($(items, $sortable).eq(target));
					});
					$helper.remove();
				},
				update: function (e, ui) {
					var $sortable = $(this);
				},
				receive: function (event, ui) {
					$(this).find('.static:last').appendTo(this);
					//add the ingredient to the extraIng array of the current orderItem
					var ingName = ui.item.attr("data-ing-name");
					orderItem.addIng(ingName);
					console.log(orderItem);
				},
				over: function () {
					$(this).find('.static:last').appendTo(this);
				},
				out: function () {
					$(this).find('.static:last').appendTo(this);
				},
				moved: function () {
					$(this).find('.static:last').appendTo(this);
				}
			};
		}

		$('#ingredients').sortable(config('.static', 'li')).disableSelection();

		$('.draggable').draggable({
			connectToSortable: '#ingredients',
			revert: 'invalid',
			helper: 'clone',
			opacity: 0.75,
			containment: "document"
		});


		$("#droppable-6").droppable({
			accept: "#ingredients li",
			activeClass: "droppable-active",
			drop: function (event, ui) {
				$(ui.draggable).remove();
				//add the ingredient to the withoutIng array of the current orderItem
				var ingName = ui.draggable.attr("data-ing-name");
				orderItem.removeIng(ingName);
				//console.log(orderItem);
			}
		});
	});

</script>